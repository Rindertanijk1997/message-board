{
  "C:\\Users\\rinde\\OneDrive\\Skrivbord\\Folkuniversitetet\\aws\\indv-up\\message-board\\message-board-backend\\my-message-board": {
    "versionSfCore": null,
    "versionFramework": "4.3.3",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>"
    },
    "composeServiceName": null,
    "servicePath": "C:\\Users\\rinde\\OneDrive\\Skrivbord\\Folkuniversitetet\\aws\\indv-up\\message-board\\message-board-backend\\my-message-board",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "message-board",
      "provider": {
        "name": "aws",
        "runtime": "nodejs16.x",
        "region": "eu-central-1",
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:*"
            ],
            "Resource": "arn:aws:dynamodb:eu-central-1:123456789012:table/MessagesTable"
          }
        ],
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "CreateMessageLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/message-board-dev-createMessage"
              }
            },
            "UpdateMessageLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/message-board-dev-updateMessage"
              }
            },
            "DeleteMessageLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/message-board-dev-deleteMessage"
              }
            },
            "GetAllMessagesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/message-board-dev-getAllMessages"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "message-board",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/message-board-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/message-board-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:*"
                          ],
                          "Resource": "arn:aws:dynamodb:eu-central-1:123456789012:table/MessagesTable"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "message-board",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "CreateMessageLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-f312739a-b680",
                  "S3Key": "serverless/message-board/dev/1726755152465-2024-09-19T14:12:32.465Z/message-board.zip"
                },
                "Handler": "handler.createMessage",
                "Runtime": "nodejs16.x",
                "FunctionName": "message-board-dev-createMessage",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateMessageLogGroup"
              ]
            },
            "UpdateMessageLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-f312739a-b680",
                  "S3Key": "serverless/message-board/dev/1726755152465-2024-09-19T14:12:32.465Z/message-board.zip"
                },
                "Handler": "handler.updateMessage",
                "Runtime": "nodejs16.x",
                "FunctionName": "message-board-dev-updateMessage",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateMessageLogGroup"
              ]
            },
            "DeleteMessageLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-f312739a-b680",
                  "S3Key": "serverless/message-board/dev/1726755152465-2024-09-19T14:12:32.465Z/message-board.zip"
                },
                "Handler": "handler.deleteMessage",
                "Runtime": "nodejs16.x",
                "FunctionName": "message-board-dev-deleteMessage",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteMessageLogGroup"
              ]
            },
            "GetAllMessagesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-f312739a-b680",
                  "S3Key": "serverless/message-board/dev/1726755152465-2024-09-19T14:12:32.465Z/message-board.zip"
                },
                "Handler": "handler.getAllMessages",
                "Runtime": "nodejs16.x",
                "FunctionName": "message-board-dev-getAllMessages",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAllMessagesLogGroup"
              ]
            },
            "CreateMessageLambdaVersionLOJNB7et86pvITdrnCDss3nh8ckORlQKSKvbjyrQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateMessageLambdaFunction"
                },
                "CodeSha256": "LlngF5m2eTvH9/cQP7MQYNyOU/ddDz0L7ZmAADu2Jpo="
              }
            },
            "UpdateMessageLambdaVersiongouAJ56XDyh6a9mH13qmTk5SE4bjNAbCCfQ2ImuHZyM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateMessageLambdaFunction"
                },
                "CodeSha256": "LlngF5m2eTvH9/cQP7MQYNyOU/ddDz0L7ZmAADu2Jpo="
              }
            },
            "DeleteMessageLambdaVersion3zw0C7MoC9gGy8C5kewXQwRnHozJs77bhs4PXMBa5w": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteMessageLambdaFunction"
                },
                "CodeSha256": "LlngF5m2eTvH9/cQP7MQYNyOU/ddDz0L7ZmAADu2Jpo="
              }
            },
            "GetAllMessagesLambdaVersionQ7SN0EEWSpkaudak8IwbGZxTzb3qZooiIWuMLq0Fs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAllMessagesLambdaFunction"
                },
                "CodeSha256": "LlngF5m2eTvH9/cQP7MQYNyOU/ddDz0L7ZmAADu2Jpo="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-message-board",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceMessages": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "messages",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMessagesIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceMessages"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMessagesOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMessages"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMessagesIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMessagesIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMessagesPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMessages"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateMessageLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateMessageLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMessagesIdVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMessagesIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateMessageLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdateMessageLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMessagesIdVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMessagesIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteMessageLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteMessageLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMessagesGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMessages"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetAllMessagesLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetAllMessagesLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1726755150104": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodMessagesOptions",
                "ApiGatewayMethodMessagesIdVarOptions",
                "ApiGatewayMethodMessagesPost",
                "ApiGatewayMethodMessagesIdVarPut",
                "ApiGatewayMethodMessagesIdVarDelete",
                "ApiGatewayMethodMessagesGet"
              ]
            },
            "CreateMessageLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateMessageLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateMessageLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateMessageLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteMessageLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteMessageLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetAllMessagesLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAllMessagesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "MessagesTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "MessagesTable",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "id",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "id",
                    "KeyType": "HASH"
                  }
                ],
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 1,
                  "WriteCapacityUnits": 1
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-eu-central-1-f312739a-b680",
              "Export": {
                "Name": "sls-message-board-dev-ServerlessDeploymentBucketName"
              }
            },
            "CreateMessageLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateMessageLambdaVersionLOJNB7et86pvITdrnCDss3nh8ckORlQKSKvbjyrQ"
              },
              "Export": {
                "Name": "sls-message-board-dev-CreateMessageLambdaFunctionQualifiedArn"
              }
            },
            "UpdateMessageLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateMessageLambdaVersiongouAJ56XDyh6a9mH13qmTk5SE4bjNAbCCfQ2ImuHZyM"
              },
              "Export": {
                "Name": "sls-message-board-dev-UpdateMessageLambdaFunctionQualifiedArn"
              }
            },
            "DeleteMessageLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteMessageLambdaVersion3zw0C7MoC9gGy8C5kewXQwRnHozJs77bhs4PXMBa5w"
              },
              "Export": {
                "Name": "sls-message-board-dev-DeleteMessageLambdaFunctionQualifiedArn"
              }
            },
            "GetAllMessagesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAllMessagesLambdaVersionQ7SN0EEWSpkaudak8IwbGZxTzb3qZooiIWuMLq0Fs"
              },
              "Export": {
                "Name": "sls-message-board-dev-GetAllMessagesLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-message-board-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "createMessage": {
          "handler": "handler.createMessage",
          "events": [
            {
              "http": {
                "path": "messages",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "message-board-dev-createMessage",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "CreateMessageLambdaVersionLOJNB7et86pvITdrnCDss3nh8ckORlQKSKvbjyrQ"
        },
        "updateMessage": {
          "handler": "handler.updateMessage",
          "events": [
            {
              "http": {
                "path": "messages/{id}",
                "method": "put",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "message-board-dev-updateMessage",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "UpdateMessageLambdaVersiongouAJ56XDyh6a9mH13qmTk5SE4bjNAbCCfQ2ImuHZyM"
        },
        "deleteMessage": {
          "handler": "handler.deleteMessage",
          "events": [
            {
              "http": {
                "path": "messages/{id}",
                "method": "delete",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "message-board-dev-deleteMessage",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "DeleteMessageLambdaVersion3zw0C7MoC9gGy8C5kewXQwRnHozJs77bhs4PXMBa5w"
        },
        "getAllMessages": {
          "handler": "handler.getAllMessages",
          "events": [
            {
              "http": {
                "path": "messages",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "message-board-dev-getAllMessages",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "GetAllMessagesLambdaVersionQ7SN0EEWSpkaudak8IwbGZxTzb3qZooiIWuMLq0Fs"
        }
      },
      "resources": {
        "Resources": {
          "MessagesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "MessagesTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          }
        },
        "Outputs": {}
      }
    },
    "serviceRawFile": "service: message-board\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs16.x\r\n  region: eu-central-1\r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - dynamodb:*\r\n      Resource: \"arn:aws:dynamodb:eu-central-1:123456789012:table/MessagesTable\"\r\n\r\nfunctions:\r\n  createMessage:\r\n    handler: handler.createMessage\r\n    events:\r\n      - http:\r\n          path: messages\r\n          method: post\r\n          cors: true\r\n  updateMessage:\r\n    handler: handler.updateMessage\r\n    events:\r\n      - http:\r\n          path: messages/{id}\r\n          method: put\r\n          cors: true\r\n  deleteMessage:\r\n    handler: handler.deleteMessage\r\n    events:\r\n      - http:\r\n          path: messages/{id}\r\n          method: delete\r\n          cors: true\r\n  getAllMessages:\r\n    handler: handler.getAllMessages\r\n    events:\r\n      - http:\r\n          path: messages\r\n          method: get\r\n          cors: true\r\n\r\nresources:\r\n  Resources:\r\n    MessagesTable:\r\n      Type: 'AWS::DynamoDB::Table'\r\n      Properties:\r\n        TableName: 'MessagesTable'\r\n        AttributeDefinitions:\r\n          - AttributeName: 'id'\r\n            AttributeType: 'S'\r\n        KeySchema:\r\n          - AttributeName: 'id'\r\n            KeyType: 'HASH'\r\n        ProvisionedThroughput:\r\n          ReadCapacityUnits: 1\r\n          WriteCapacityUnits: 1\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "9e5254edc0f68936378418fa1518ac29",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "6942adfa-8977-4156-a9f4-83ed976582ae",
    "orgName": "rindert",
    "userId": "S77Sz6FC2HtpK5Kgyk",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "rindert",
    "subscription": null,
    "userEmail": "vandijkrindert@gmail.com",
    "serviceProviderAwsRegion": "eu-central-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "050451366469",
    "projectType": "traditional",
    "versionSf": "4.3.3",
    "serviceProviderAwsCfStackName": "message-board-dev",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:eu-central-1:050451366469:stack/message-board-dev/78346260-768d-11ef-89f3-0a3108748395",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:eu-central-1:050451366469:stack/message-board-dev/78346260-768d-11ef-89f3-0a3108748395",
    "serviceProviderAwsCfStackCreated": "2024-09-19T13:45:45.200Z",
    "serviceProviderAwsCfStackUpdated": "2024-09-19T14:12:37.789Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "UpdateMessageLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:050451366469:function:message-board-dev-updateMessage:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-message-board-dev-UpdateMessageLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteMessageLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:050451366469:function:message-board-dev-deleteMessage:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-message-board-dev-DeleteMessageLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAllMessagesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:050451366469:function:message-board-dev-getAllMessages:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-message-board-dev-GetAllMessagesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateMessageLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:050451366469:function:message-board-dev-createMessage:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-message-board-dev-CreateMessageLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://vl6ibqcmg8.execute-api.eu-central-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-message-board-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-eu-central-1-f312739a-b680",
        "ExportName": "sls-message-board-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}